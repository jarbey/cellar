{% extends 'base.html.twig' %}

{% block body %}
<div class="row" style="display: flex; width: 100%">
	<div class="col" style="display: flex; margin: 0 auto">
		<div class="container-fluid">
			<h1 style="text-align: center;">Cellar - {{ db.name }}{# - <span id="date">Du <input type="date" id="from" value="{{ from|date('Y-m-d') }}"> Au <input type="date" id="to" value="{{ to|date('Y-m-d') }}"></span>#}</h1>
			<div class="row">
                {% for color, nb in stats_color %}
					<div class="row text-black" style="display: flex; width: 350px">
						<div class="col" style="display: flex; margin: auto">{{ color }} :</div>
						<div class="col" style="display: flex; margin: auto">{{ nb }}</div>
					</div>
                {% endfor %}
			</div>
			<div class="row">
				&nbsp;
			</div>
			<div class="row">
				&nbsp;
			</div>
			<div class="row">
                {% for bottle_name, bottle_data in stats_bottle_size %}
					<div class="row text-black" style="display: flex; width: 350px">
						<div class="col" style="display: flex; margin: auto">{{ bottle_name }} ({{ bottle_data.capacity }}) :</div>
						<div class="col" style="display: flex; margin: auto">{{ bottle_data.nb }}</div>
					</div>
                {% endfor %}
			</div>
			<div class="row">
				&nbsp;
			</div>
			<div class="row">
				&nbsp;
			</div>
			<div class="row">
                {{ pairing|nl2br }}
			</div>
		</div>
	</div>
	<div class="col" style="flex: 0">
		<div class="container border border-dark" style="width: 350px">
			<div class="row text-white bg-dark" style="display: flex; height: 2em">
				<div class="col text-center" style="margin: auto">Actuellement</div>
			</div>
			{% for sensor in db.sensors %}
			<div class="row text-white bg-secondary" style="display: flex; height: 5em">
				<div class="col" style="display: flex; margin: auto">
					{{ sensor.name }} :
				</div>
				<div class="col" style="display: flex; margin: auto" id="sensor_{{ sensor.id }}_temperature_state">
					<div style="margin: auto"><i class="fa fa-thermometer-quarter" id="sensor_{{ sensor.id }}_temperature_icon"></i></div>
					<div id="sensor_{{ sensor.id }}_temperature_value">???</div>
				</div>
				<div class="col" style="display: flex; margin: auto" id="sensor_{{ sensor.id }}_humidity_state">
					<div style="margin: auto"><i class="fa fa-tint" id="sensor_{{ sensor.id }}_humidity_icon"></i></div>
					<div id="sensor_{{ sensor.id }}_humidity_value">???</div>
				</div>
			</div>
			{% endfor %}

		</div>
	</div>
</div>
{% endblock %}

{% block javascripts %}
	<script type="text/javascript">
		(function () {
			'use strict';

			var url = new URL(window.location.href);
			var from = url.searchParams.get('from');
			var to = url.searchParams.get('to');

			$('#from').change(function () {
				var from_timestamp = (new Date($(this).val())).getTime() / 1000;
				window.location = '/{{ db.id }}?from=' + from_timestamp + ((to != null) ? '&to=' + to : '');
			});

			$('#to').change(function () {
				var to_timestamp = ((new Date($(this).val())).getTime() / 1000) + 24*3600 - 1;
				window.location = '/{{ db.id }}?to=' + to_timestamp + ((from != null) ? '&from=' + from : '');
			});

			var sensors_definition = [];
			{% for sensor in db.sensors %}
				sensors_definition[{{ sensor.id }}] = {
					temperature_limit: {
						low_alert_value: {{ sensor.temperatureLimit.lowAlertValue }},
						high_alert_value: {{ sensor.temperatureLimit.highAlertValue }},
						low_warning_value: {{ sensor.temperatureLimit.lowWarningValue }},
						high_warning_value: {{ sensor.temperatureLimit.highWarningValue }}
					},
					humidity_limit: {
						low_alert_value: {{ sensor.humidityLimit.lowAlertValue }},
						high_alert_value: {{ sensor.humidityLimit.highAlertValue }},
						low_warning_value: {{ sensor.humidityLimit.lowWarningValue }},
						high_warning_value: {{ sensor.humidityLimit.highWarningValue }}
					}
				};
			{% endfor %}

			var _receiver = document.getElementById('ws_status');
			var ws = new WebSocket('wss://{{ ws_url }}');

			ws.onmessage = function (event) {
				try {
					var sensor_raw_data = JSON.parse(event.data);
					console.log(sensor_raw_data);

					var header_content = [];
					for(var k in sensor_raw_data.sensor_data) {
						var sensor_data = sensor_raw_data.sensor_data[k];
						var sid = sensor_data.sensor.id;

						if (sensors_definition[sid]) {
                            $('#sensor_' + sid + '_temperature_value').html(sensor_data.temperature + 'Â°C');
                            var state_sel = $('#sensor_' + sid + '_temperature_state');
                            //state_sel.removeClass().addClass('row text-white');
                            var limit = sensors_definition[sid].temperature_limit;
                            if ((sensor_data.temperature < limit.low_alert_value) || (sensor_data.temperature > limit.high_alert_value)) {
                                state_sel.addClass('bg-danger');
                            } else if ((sensor_data.temperature < limit.low_warning_value) || (sensor_data.temperature > limit.high_warning_value)) {
                                state_sel.addClass('bg-warning');
                            } else {
                                state_sel.addClass('bg-success');
                            }

                            $('#sensor_' + sid + '_humidity_value').html(sensor_data.humidity + '%');
                            var state_sel = $('#sensor_' + sid + '_humidity_state');
                            //state_sel.removeClass().addClass('row text-white');
                            limit = sensors_definition[sid].humidity_limit;
                            if ((sensor_data.humidity < limit.low_alert_value) || (sensor_data.humidity > limit.high_alert_value)) {
                                state_sel.addClass('bg-danger');
                            } else if ((sensor_data.humidity < limit.low_warning_value) || (sensor_data.humidity > limit.high_warning_value)) {
                                state_sel.addClass('bg-warning');
                            } else {
                                state_sel.addClass('bg-success');
                            }
                        }
					}
				} catch (error) {
					console.log(error);
				}
			};

			ws.onclose = function () {
			};

			ws.onerror = function () {
			};
		})();
	</script>
{% endblock %}